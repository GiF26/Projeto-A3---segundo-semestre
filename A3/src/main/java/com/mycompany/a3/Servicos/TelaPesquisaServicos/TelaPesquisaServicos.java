package com.mycompany.a3.Servicos.TelaPesquisaServicos;

import com.mycompany.a3.Servicos.TelasContrato.TelaCriaContratoCliente;
import com.mycompany.a3.UsuariosSistemas.TelaCadastroPrestador.Prestador;
import com.mycompany.a3.UsuariosSistemas.TelaLogin.TelaLogin;
import com.mycompany.a3.UsuariosSistemas.UsuarioSistema;
import com.mycompany.a3.config.configConexao;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Giovana Ferreira
 */
public class TelaPesquisaServicos extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TelaPesquisaServicos.class.getName());
    private ArrayList <Prestador> listaPrestador = new ArrayList();
    public UsuarioSistema usuarioSistema = new UsuarioSistema();

    public TelaPesquisaServicos() {
        initComponents();
    }
    
    public TelaPesquisaServicos(UsuarioSistema u) {
        this.usuarioSistema = u;
        initComponents();
        configTela();
        eventos();
        carregarLista();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPesquisarPrestador = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txtPesquisa = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCancelar.setText("Cancelar");

        tblPesquisarPrestador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPesquisarPrestador);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCancelar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addContainerGap())
        );

        btnPesquisar.setText("Pesquisar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(txtPesquisa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPesquisar)
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TelaPesquisaServicos().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPesquisarPrestador;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables

    private void configTela(){
        setLocationRelativeTo(null); // centraliza tela
    }
    
    private void eventos(){
        clickBtnFechar();
        clickItemLista();
        clickBtnPesquisar();
    }
    
    public void clickBtnFechar(){
        btnCancelar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                new TelaLogin().setVisible(true);
            }
        });
    }
    
    private void carregarLista() {
        String[] colunas = {"Nome", "Cidade", "Estado","Nome Servi√ßo", "Categoria"};

        DefaultTableModel model = new DefaultTableModel(colunas, 0);
        tblPesquisarPrestador.setModel(model);
        
        String sql = "SELECT P.ID, P.NOME, P.EMAIL, P.CPF, P.TELEFONE, P.CIDADE, P.ESTADO, " +
             "P.CEP, P.BIO, P.TIPO_SERVICO, S.NOME_SERVICO, P.SEXO, S.CATEGORIA, " +
             "CC.NOME_CATEGORIA, P.DATA_NASCIMENTO " +
             "FROM PRESTADORES P " +
             "LEFT JOIN SERVICOS S ON (S.ID = P.TIPO_SERVICO) " +
             "LEFT JOIN CATEGORIAS CC ON (S.CATEGORIA = CC.ID) " +
             "WHERE (? = '' OR " +  
             "S.NOME_SERVICO LIKE ? OR " +
             "CC.NOME_CATEGORIA LIKE ? OR " +
             "P.NOME LIKE ?)";
        
            String termoBusca = txtPesquisa.getText();
            String termoLike = "%" + termoBusca + "%";            

        try (Connection con = configConexao.getConexao();
             PreparedStatement ps = con.prepareStatement(sql)) {
            
                ps.setString(1, termoBusca);
                ps.setString(2, termoLike);
                ps.setString(3, termoLike);
                ps.setString(4, termoLike);

                try(ResultSet rs = ps.executeQuery()){
                    while (rs.next()) {
                        Prestador p = new Prestador();
                        p.setId(rs.getInt("ID"));
                        p.setNome(rs.getString("nome"));
                        p.setEmail(rs.getString("email"));
                        p.setCpf(rs.getString("CPF"));
                        p.setTelefone(rs.getString("TELEFONE"));
                        p.setCidade(rs.getString("cidade"));
                        p.setEstado(rs.getString("estado"));
                        p.setCep(rs.getString("CEP"));
                        p.setBio(rs.getString("BIO"));
                        p.setTipoServico(rs.getInt("tipo_servicO"));
                        p.setDataNascimento(rs.getDate("data_nascimento"));
                        p.setSexo(rs.getInt("SEXO"));

                        int categoria = rs.getInt("CATEGORIA");
                        String nomeCategoria;

                        if(categoria == 0){
                            nomeCategoria = "Outros";
                        }else{
                            nomeCategoria = rs.getString("nome_categoria");
                        }

                        Object[] linha = {
                            p.getNome(),
                            p.getCidade(),
                            p.getEstado(),
                            p.getTipoServico() + " - " + rs.getString("nome_servicO"),
                            categoria + " - " + nomeCategoria
                        };
                        model.addRow(linha);
                        listaPrestador.add(p);
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, 
                    "Erro ao carregar prestadores: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
            }
    }
    
    private void clickItemLista(){
        tblPesquisarPrestador.addMouseListener(new MouseAdapter() {
            
           public void mouseClicked(MouseEvent e) {
            int linha = tblPesquisarPrestador.rowAtPoint(e.getPoint());
           
            if (linha != -1) {
                TelaCriaContratoCliente contrato = new TelaCriaContratoCliente();
                contrato.getUsuarioSistema(usuarioSistema);
//                dispose();
                contrato.setVisible(true);
                contrato.carregaTela(listaPrestador.get(linha));
                }           
            }
        });
    }
    
    private void clickBtnPesquisar(){
        btnPesquisar.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                carregarLista();
            }
        });
    }
    
    public void getUsuarioSistema(UsuarioSistema u){
        this.usuarioSistema = u;
    }
}
